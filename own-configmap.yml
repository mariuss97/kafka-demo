apiVersion: v1
kind: ConfigMap
metadata:
  name: port-config
  namespace: nginx-ingress 
data:
  insertedd.yml: |+
    worker_processes  auto;
    daemon off;

    error_log  stderr notice;
    pid        /var/lib/nginx/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        map $upstream_trailer_grpc_status $grpc_status {
            default $upstream_trailer_grpc_status;
            '' $sent_http_grpc_status;
        }


        access_log  /dev/stdout  main;




        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout 65s;
        keepalive_requests 100;

        #gzip  on;

        server_names_hash_max_size 1024;
        server_names_hash_bucket_size 256;

        variables_hash_bucket_size 256;
        variables_hash_max_size 1024;

        map $request_uri $request_uri_no_args {
            "~^(?P<path>[^?]*)(\?.*)?$" $path;
        }

        map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
        }
        map $http_upgrade $vs_connection_header {
            default upgrade;
            ''      $default_connection_header;
        }








        server {
            # required to support the Websocket protocol in VirtualServer/VirtualServerRoutes
            set $default_connection_header "";
            set $resource_type "";
            set $resource_name "";
            set $resource_namespace "";
            set $service "";

            listen 80 default_server;


            listen 443 ssl default_server;



            ssl_certificate /etc/nginx/secrets/default;
            ssl_certificate_key /etc/nginx/secrets/default;






            server_name _;
            server_tokens "on";






            location / {
                return 404;
            }
        }
        # stub_status
        server {
            listen 8080;

            allow 127.0.0.1;
            deny all;

            location /stub_status {
                stub_status;
            }
        }

        include /etc/nginx/config-version.conf;
        include /etc/nginx/conf.d/*.conf;

        server {
            listen unix:/var/lib/nginx/nginx-502-server.sock;
            access_log off;



            return 502;
        }

        server {
            listen unix:/var/lib/nginx/nginx-418-server.sock;
            access_log off;



            return 418;
        }
    }

    stream {
        log_format  stream-main  '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time "$ssl_preread_server_name"';

        access_log  /dev/stdout  stream-main;





        include /etc/nginx/stream-conf.d/*.conf;
    }   

